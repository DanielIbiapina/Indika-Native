import auth from "@react-native-firebase/auth";

// ‚úÖ NOVO: Flag para simular produ√ß√£o em DEV
const SIMULATE_PRODUCTION = true; // ‚Üê MANTER TRUE para produ√ß√£o

class SMSVerificationService {
  constructor() {
    this.confirmationResult = null;
    this.recaptchaVerifier = null;
  }

  // ‚úÖ NOVO: Detectar modo de opera√ß√£o
  isProductionMode() {
    return !__DEV__ || SIMULATE_PRODUCTION;
  }

  // ‚úÖ NOVO: Simula√ß√£o mais realista de produ√ß√£o
  async simulateProductionSMS(phoneNumber) {
    console.log("üé≠ SIMULANDO PRODU√á√ÉO: Enviando SMS");

    // Simular diferentes cen√°rios que podem acontecer em prod
    const scenarios = [
      { success: true, delay: 2000 }, // Sucesso normal
      { success: false, error: "auth/too-many-requests", delay: 1000 }, // Muitas tentativas
      { success: false, error: "auth/invalid-phone-number", delay: 500 }, // N√∫mero inv√°lido
    ];

    // Para n√∫meros de teste, sempre sucesso
    const isTestNumber =
      phoneNumber.includes("11999999999") ||
      phoneNumber.includes("11987654321");

    if (isTestNumber) {
      await new Promise((resolve) => setTimeout(resolve, 1500));
      return {
        success: true,
        verificationId: "simulated-verification-id",
        isSimulated: true,
      };
    }

    // Para outros n√∫meros, simular cen√°rios variados
    const scenario = scenarios[0]; // Por enquanto sempre sucesso
    await new Promise((resolve) => setTimeout(resolve, scenario.delay));

    if (scenario.success) {
      return {
        success: true,
        verificationId: "simulated-verification-id",
        isSimulated: true,
      };
    } else {
      return {
        success: false,
        error: this.getErrorMessage(scenario.error),
        code: scenario.error,
        isSimulated: true,
      };
    }
  }

  // ‚úÖ NOVO: Simula√ß√£o de verifica√ß√£o de c√≥digo
  async simulateCodeVerification(code) {
    console.log("üé≠ SIMULANDO PRODU√á√ÉO: Verificando c√≥digo");

    // C√≥digos de teste que sempre funcionam
    const validCodes = ["123456", "000000", "111111"];

    await new Promise((resolve) => setTimeout(resolve, 1000));

    if (validCodes.includes(code)) {
      return {
        success: true,
        user: {
          uid: "simulated-user-id",
          phoneNumber: "+5511999999999",
        },
        verifiedPhoneToken: "simulated-firebase-token-" + Date.now(),
        phoneNumber: "+5511999999999",
        isSimulated: true,
      };
    } else {
      return {
        success: false,
        error: "C√≥digo de verifica√ß√£o inv√°lido",
        code: "auth/invalid-verification-code",
        isSimulated: true,
      };
    }
  }

  getErrorMessage(errorCode) {
    const messages = {
      "auth/invalid-phone-number": "N√∫mero de telefone inv√°lido",
      "auth/too-many-requests": "Muitas tentativas. Tente novamente mais tarde",
      "auth/quota-exceeded":
        "Limite de SMS atingido. Tente novamente mais tarde",
      "auth/argument-error":
        "Erro na configura√ß√£o. Verifique o n√∫mero de telefone",
      "auth/captcha-check-failed":
        "Falha na verifica√ß√£o de seguran√ßa. Tente novamente",
      "auth/invalid-verification-code": "C√≥digo de verifica√ß√£o inv√°lido",
      "auth/code-expired": "C√≥digo expirado. Solicite um novo c√≥digo",
      "auth/session-expired": "Sess√£o expirada. Solicite um novo c√≥digo",
    };
    return messages[errorCode] || "Erro desconhecido";
  }

  // Enviar c√≥digo SMS REAL
  async sendVerificationCode(phoneNumber) {
    try {
      console.log(`üì± Enviando SMS REAL para: ${phoneNumber}`);

      // Validar formato
      if (!phoneNumber || !phoneNumber.startsWith("+55")) {
        throw new Error("N√∫mero deve estar no formato +55XXXXXXXXXXX");
      }

      const cleanNumber = phoneNumber.replace(/[^\d+]/g, "");
      if (cleanNumber.length !== 14) {
        throw new Error("N√∫mero inv√°lido. Deve ter 11 d√≠gitos ap√≥s +55");
      }

      // DEV: Simular
      if (__DEV__) {
        console.log("üß™ Modo DEV: Simulando SMS");
        await new Promise((resolve) => setTimeout(resolve, 1500));
        return {
          success: true,
          verificationId: "dev-verification-id",
          isSimulated: true,
        };
      }

      // PRODU√á√ÉO: Firebase REAL
      console.log("üöÄ Enviando SMS REAL via Firebase");
      const confirmation = await auth().signInWithPhoneNumber(cleanNumber);
      this.confirmationResult = confirmation;

      return {
        success: true,
        verificationId: confirmation.verificationId,
        isSimulated: false,
      };
    } catch (error) {
      console.error("‚ùå Erro ao enviar SMS:", error);

      let errorMessage = "Erro ao enviar c√≥digo SMS";
      switch (error.code) {
        case "auth/invalid-phone-number":
          errorMessage = "N√∫mero de telefone inv√°lido";
          break;
        case "auth/too-many-requests":
          errorMessage = "Muitas tentativas. Tente novamente mais tarde";
          break;
        case "auth/quota-exceeded":
          errorMessage = "Limite de SMS atingido. Tente novamente mais tarde";
          break;
        default:
          errorMessage = error.message || "Erro desconhecido";
      }

      return {
        success: false,
        error: errorMessage,
        code: error.code,
      };
    }
  }

  // Verificar c√≥digo SMS REAL
  async verifyCode(verificationCode) {
    try {
      console.log(`üîç Verificando c√≥digo: ${verificationCode}`);

      if (!verificationCode || verificationCode.length !== 6) {
        return {
          success: false,
          error: "C√≥digo deve ter 6 d√≠gitos",
        };
      }

      // DEV: Simular
      if (__DEV__) {
        console.log("üß™ Modo DEV: Simulando verifica√ß√£o");
        if (verificationCode === "123456") {
          await new Promise((resolve) => setTimeout(resolve, 1000));
          return {
            success: true,
            user: { uid: "dev-user" },
            verifiedPhoneToken: "dev-token-123",
            phoneNumber: "+5511999999999",
            isSimulated: true,
          };
        } else {
          return { success: false, error: "C√≥digo inv√°lido" };
        }
      }

      // PRODU√á√ÉO: Firebase REAL
      if (!this.confirmationResult) {
        return {
          success: false,
          error: "Nenhuma verifica√ß√£o em andamento",
        };
      }

      console.log("üöÄ Verificando c√≥digo REAL via Firebase");
      const result = await this.confirmationResult.confirm(verificationCode);

      const verifiedPhoneToken = await result.user.getIdToken();

      return {
        success: true,
        user: result.user,
        verifiedPhoneToken,
        phoneNumber: result.user.phoneNumber,
        isSimulated: false,
      };
    } catch (error) {
      console.error("‚ùå Erro ao verificar c√≥digo:", error);

      let errorMessage = "C√≥digo inv√°lido";
      switch (error.code) {
        case "auth/invalid-verification-code":
          errorMessage = "C√≥digo de verifica√ß√£o inv√°lido";
          break;
        case "auth/code-expired":
          errorMessage = "C√≥digo expirado. Solicite um novo c√≥digo";
          break;
        case "auth/session-expired":
          errorMessage = "Sess√£o expirada. Solicite um novo c√≥digo";
          break;
        default:
          errorMessage = error.message || "Erro na verifica√ß√£o";
      }

      return {
        success: false,
        error: errorMessage,
        code: error.code,
      };
    }
  }

  // Limpar estado
  clear() {
    this.confirmationResult = null;
    if (this.recaptchaVerifier) {
      this.recaptchaVerifier.clear();
      this.recaptchaVerifier = null;
    }
  }
}

export const smsVerificationService = new SMSVerificationService();
